volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:

networks:
  dokploy-network:
    external: true

x-n8n: &service-n8n # image: n8nio/n8n:latest
  build:
    context: .
    dockerfile: Dockerfile
  networks:
    - dokploy-network
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=ollama:11434
    - NODE_FUNCTION_ALLOW_EXTERNAL=*
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
  env_file:
    - .env

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks:
    - dokploy-network
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks:
    - dokploy-network
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks:
      - dokploy-network
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      - postgres

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    # ports:
    #   - 5678:5678
    expose:
      - 5678
    volumes:
      - n8n_storage:/home/node/.n8n
      # - /demo-data:/demo-data
      # - ./shared:/data/shared
      #local dev
      # - ./custom_node:/home/node/.n8n/custom
      # - /etc/dokploy/compose/n8n-n8nstack-ze6zva/code/custom_node:/home/node/.n8n/custom
    depends_on:
      - postgres
      - n8n-import
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.n8n.rule=Host(`n8n.dev-oi.fr`)"
    #   - "traefik.http.routers.n8n.entrypoints=websecure"
    #   - "traefik.http.routers.n8n.tls.certResolver=letsencrypt"
    #   - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    hostname: openwebui
    container_name: openwebui
    networks:
      - dokploy-network
    restart: unless-stopped
    # local dev
    # ports:
    #   - 8080:8080
    expose:
      - 8080
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      - ollama-cpu
    volumes:
      - open-webui:/app/backend/data
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.openwebui.rule=Host(`openwebui.dev-oi.fr`)"
    #   - "traefik.http.routers.openwebui.entrypoints=websecure"
    #   - "traefik.http.routers.openwebui.tls.certResolver=letsencrypt"
    #   - "traefik.http.services.openwebui.loadbalancer.server.port=8080"

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks:
      - dokploy-network
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    <<: *service-ollama

  ollama-pull-llama-cpu:
    <<: *init-ollama
    depends_on:
      - ollama-cpu
